2008-09-25  Federico Mena Quintero  <federico@novell.com>

	* Makefile.am: Removed the obsolete "make upload" target.

2008-09-25  Federico Mena Quintero  <federico@novell.com>

	* NEWS: Update for the 0.2 release.

2008-07-18  Frank Ch. Eigler  <fche@elastic.org>

	Support quick suspend/resume.
	* main-window.cx (do_quit): Stop runner here ...
	(stop_recording): Instead of here; deleted.
	(set_record_mode): Stopped=>suspend.
	(start_recording): Just resume if runner exists.
	* systemtap-runner.cx (modulename): Compute new member.
	(Suspend, Resume): Use it to control /procfs file.
	(build_systemtap_argv): Set module name.  Too bad it defeats
	caching for now, but oh well.
	(build_script): Include procfs controls and conditional probes.

2007-12-04  Federico Mena Quintero  <federico@novell.com>

	* systemtap-runner.cs (SystemtapRunner.build_systemtap_argv): Ask
	stap to be extra-verbose with "-vvv".

2007-10-31  Federico Mena Quintero  <federico@novell.com>

	* Makefile.am (upload): Add the "make upload" target again.

2007-10-31  Federico Mena Quintero  <federico@novell.com>

	More autotools / intltool voodoo.

	* configure.ac: Use IT_PROG_INTLTOOL() instead of
	AC_PROG_INTLTOOL().

	* Makefile.am: Add the intltool bits.

	* autogen.sh: Use gnome-autogen.sh instead of reinventing the wheel.

2007-10-31  Federico Mena Quintero  <federico@novell.com>

	* Add the start of an autotools framework.  Grrrrr.

2007-10-12  Federico Mena Quintero  <federico@novell.com>

	* syscall-tree-view.cs: (SyscallTreeView.ColumnId): Renamed from
	Colums, to avoid collisions with the TreeView.Columns in the
	parent class.

2007-10-12  Federico Mena Quintero  <federico@novell.com>

	Change the way we fetch the return value of syscalls from
	systemtap.  We used "$return" which was supposed to give us an
	int, but apparently not all versions of systemtap support that.
	Instead, use "retstr", which gives us a stringified version.

	* systemtap-parser.cs (SystemtapParserTest.OpenReturnError): Add a
	test to parse syscalls that return an error.
	(SystemtapParser.SystemtapParser): Make the regex used for return
	values support a format like "-2 (ENOENT)" for syscalls that
	return an error.

	* systemtap-runner.cs (SystemtapRunner.build_script): Use retstr,
	not $return for the return value of syscalls.

2007-08-03  Federico Mena Quintero  <federico@novell.com>

	* README: Mention that Mortadelo is released under the GPL.

	* COPYING: GPLv2.

2007-07-18  Federico Mena Quintero  <federico@novell.com>

	* README: Note from Paulo Henrique Silva on how to run Mortadelo
	under Fedora Core 6.

2007-07-17  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.set_default_size): Set the default
	size to 75% of the screen's dimensions.

2007-07-09  Federico Mena Quintero  <federico@novell.com>

	* Makefile (upload): Use "git push" again instead of rsync.  Let's
	see if cloning the remote repository works this time...

2007-07-05  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.start_recording): Connect to the
	StderrDataAvailable event on the runner.  Create an error window
	which we may need later.
	(MainWindow.runner_stderr_data_available_cb): Show the error
	window and use it to show the child's stderr output.
	(MainWindow.ensure_recording_stopped): Switch to the
	RecordMode.Stopped state and clear the timeouts and wait cursor;
	moved this code from stop_recording().
	(MainWindow.stop_recording): Use ensure_recording_stopped().
	(MainWindow.runner_child_exited_cb): Stop the recording state, and
	check the status of the child.

	* runner.cs (AggregatorRunner.Stop): Make stopping idempotent.

2007-07-05  Federico Mena Quintero  <federico@novell.com>

	* runner.cs (AggregatorRunner.AggregatorRunner): Don't take in the
	argv, stdin_str, and aggregator.  We'll pass these later in
	derived classes.
	(AggregatorRunner.Run): Take in those arguments here.
	(AggregatorRunnerTest.Aggregate): Pass the arguments to Run(), not
	to the constructor.

	* systemtap-runner.cs (SystemtapRunner): Make this a derived class
	of AggregatorRunner.
	(SystemtapRunner.SystemtapRunner): Don't construct an explicit
	AggregatorRunner.
	(SystemtapRunner.Run): Build our argv and stdin_str here and pass
	them on to the superclass.
	(SystemtapRunner.Stop): Removed.
	(SystemtapRunner.child_exited_cb): Removed along with the
	ChildExited event; the caller will simply use the event from the
	superclass.

2007-07-05  Federico Mena Quintero  <federico@novell.com>

	* runner.cs (AggregatorRunner.StderrDataAvailable): New event.
	We'll use this to send the child's stderr output to our caller.
	(AggregatorRunner.stderr_reader_data_available_cb): Notify
	upstream through the StderrDataAvailable event.

2007-07-04  Federico Mena Quintero  <federico@novell.com>

	Display a watch cursor and a status bar message while Systemtap
	starts up (it takes a long time!).  Based on a patch by Carlos
	Alberto Cortez <calberto.cortez@gmail.com>.

	* main-window.cs (MainWindow.waiting_for_systemtap_to_start): New
	flag.
	(MainWindow.start_recording): Set our wait status to true.
	(MainWindow.set_waiting_for_systemtap_to_start): Sets the wait
	cursor as appropriate and displays a message in the status bar
	saying that Systemtap is starting.
	(MainWindow.full_log_syscall_inserted_cb): New callback; turns off
	the waiting state.
	(MainWindow.stop_recording): Turn off the waiting state.
	(MainWindow.runner_child_exited_cb): Likewise.

2007-06-29  Federico Mena Quintero  <federico@novell.com>

	* log-provider.cs (ILogProvider.GetSyscallByBaseIndex): Method to
	ask a log provider for the index of a syscall within that log,
	based on the syscall's base index (i.e. the one from a full Log).

	* log.cs (Log.GetSyscallByBaseIndex): Implement trivially; our
	indices *are* the base indices.

	* aggregator.cs (AggregatorTest.OpenTest): Test the base indices.

	* compact-log.cs (CompactLog.GetSyscallByBaseIndex): Implement.
	(CompactLogTest.TestCompactLog): Test the base indices.

	* filtered-log.cs (FilteredLog.GetSyscallByBaseIndex): Implement.
	(FilteredLogTest.TestFilteredLog): Test the base indices.

	* main-window.cs (MainWindow.tree_view_selection_changed_cb): Also
	highlight the paired row if we are in filtered mode.
	(MainWindow.tree_view_row_activated_cb): Likewise.

2007-06-28  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.help_about_cb): Add Carlos Alberto to
	the authors.

	* AUTHORS: Likewise.

2007-06-28  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* main-window.cs (MainWindow.tree_view_row_activated_cb): When a
	row gets activated and we are in Full view mode, move to the other
	part of the syscall (to the end syscall if we are in the start,
	and visceversa).

	* syscall-tree-view.cs (SyscallTreeView.SetPairedRow): New method;
	sets the "paired row" which we'll draw in another color.  This is
	the complementary syscall if we are in full view mode.
	(SyscallTreeView.data_func): If we are on a paired row, compute a
	suitable color for it.

2007-06-28  Federico Mena Quintero  <federico@novell.com>

	* doc/architecture.txt: Start documenting the architecture of the program.

	* README: New README file.

	* HACKING: Hacking notes.

	* AUTHORS: Me me me.

2007-06-27  Federico Mena Quintero  <federico@novell.com>

	* systemtap-runner.cs (SystemtapRunner.build_script): Add a full
	list of filename-related syscalls to the systemtap script, instead
	of just monitoring open().

	* systemtap-parser.cs: Change the format a bit; now we use
	"start.syscallname:" or "return.syscallname:" at the beginning of
	each line.

	* *.cs: Change the tests to deal with the new format for syscalls.

	* systemtap-serializer.cs (SystemtapSerializer.Serialize): Use the
	new format.

	* aggregator.cs (Aggregator.add_start_syscall): For now, don't
	throw an exception if we get a syscall start before getting the
	end of the previous syscall.  Why the hell does this happen, though?

2007-06-26  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.PushTransientStatus): New method.
	Pushes a message to the statusbar, and will only display it for a
	short period of time.
	(MainWindow.PushStatus): Don't push the string if there's a
	transient message being displayed.
	(MainWindow.next_error_cb): Implement.
	(MainWindow.build_normal_action_entries): Add an action for "Next Error".

	* util.cs (Util.Version): Now that we have all the basic
	functionality (see doc/notes.txt), set this to "0.1"!

2007-06-26  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.build_normal_action_entries): Add a
	Help/About action.
	(MainWindow.help_about_cb): Implement.

2007-06-26  Federico Mena Quintero  <federico@novell.com>

	* timer-throttle.cs: Trivial class to throttle events based on
	a timeout.

	* main-window.cs (MainWindow.build_filter_box): Use a timer
	throttle so that we don't refilter on every keypress, but only
	after a key hasn't been pressed for a fraction of a second.
	(MainWindow.filter_throttle_trigger_cb): Renamed from
	filter_entry_changed_cb().
	(MainWindow.do_quit): Stop the filter throttle.

2007-06-26  Federico Mena Quintero  <federico@novell.com>

	* util.cs: (Util.FormatTimestamp): Format in HH:MM:SS.usec format.

	* regex-filter.cs: Change the timestamp test to use the new format.

2007-06-26  Federico Mena Quintero  <federico@novell.com>

	* util.cs (Util.MakeRegex): Create a regex from a string, using
	the same case-sensitivity rules as Emacs.  (Lowercase regex means
	case-insensitive match; regex with uppercase chars means
	case-sensitive search).

	* main-window.cs (MainWindow.make_regex): Use Util.MakeRegex().

2007-06-25  Federico Mena Quintero  <federico@novell.com>

	Make filtering faster.  We memoize the strings to be matched,
	since otherwise we'll be matching against the same strings
	(e.g. "gnome-panel") all the time.

	* regex-cache.cs: Trivial memoizer for regex match results.

	* filter-formatter.cs (FilterFormatter.highlight_in_string):
	Escape the original string before marking it up.
	(FilterFormatter.highlight_matches): Likewise.

	* main-window.cs (MainWindow.build_window): Give the focus to the
	filter entry.

	* regex-filter.cs (RegexFilter.RegexFilter): Use a RegexCache
	instead of a plain Regex.

2007-06-25  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.build_window): Add an entry for search-as-you-type.
	(MainWindow.FilterMode): New enum.
	(MainWindow.create_derived_log): Create the filtered_log if necessary.
	(MainWindow.set_derived_model): Set the formatter on the tree view.
	(MainWindow.make_regex): New utility function; if the filter regex
	cannot be compiled, it will display the error in a box.

	* syscall-formatter.cs: Trivial interface to format the various
	fields of a syscall for display.

	* plain-formatter.cs: Implementation of a syscall formatter just
	like it was before.

	* filter-formatter.cs: Implementation of a syscall formatter;
	creates Pango markup for the highlighted matches in the syscall fields.

	* Makefile (shared_sources): Added the new files.
	(mortadelo.exe): Oops, we don't need -r:Mono.C5.

2007-06-25  Federico Mena Quintero  <federico@novell.com>

	* syscall-tree-view.cs (SyscallTreeView.data_func): Get the
	syscall's index from the model and iter.

	* syscall-list-model.cs (SyscallListModel.SyscallListModel):
	Connect to the model's events.  We'll do automatic updates rather
	than explicit ones.
	(SyscallListModel.Update): Removed.
	(SyscallListModel.populate): Renamed from update_new_rows().
	(SyscallListModel): Store plain zeroes in the list store; we'll
	use TreePaths to figure out the indices in the view.

	* main-window.cs (MainWindow.update_timeout_cb): Don't Update()
	the model explicitly; it does this automatically now.

	* filtered-log.cs (FilteredLog.GetMatches): New method to get the
	matches for a row.

2007-06-25  Federico Mena Quintero  <federico@novell.com>

	* filtered-log.cs: New FilteredLog class; takes a log and filters
	it based on an ISyscallFilter.

	* Makefile (shared_sources): Added filtered-log.cs.

2007-06-25  Federico Mena Quintero  <federico@novell.com>

	* main.cs: Return 1 if the user is not root.

2007-06-25  Federico Mena Quintero  <federico@novell.com>

	* compact-log.cs (CompactLog.full_log_syscall_inserted_cb):
	Renamed from full_log_syscall_added_cb().  Check that the row is
	at the end of the base log; we only support that for now.
	(CompactLog.add_syscall): Call SyscallInserted instead of
	SyscallAdded.
	(CompactLogTest.TestCompactLog): Test that the inserted row is the
	last row in the model.

	* log-provider.cs (ILogProvider): Added events for SyscallRemoved
	and SyscallInserted.  Removed SyscallAdded; we'll implement it in
	terms of SyscallInserted.

	* log.cs (Log.AppendSyscall): Use SyscallInserted instead of
	SyscallAdded.
	
2007-06-21  Federico Mena Quintero  <federico@novell.com>

	* log-provider.cs (ILogProvider.SyscallAdded): New event.  We'll
	move away from the model of updating logs by hand, to having them
	do it automatically and notify callers about changes.

	* log.cs (Log.AppendSyscall): Emit the SyscallAdded event.

	* compact-log.cs (CompactLogTest.TestCompactLog): Test the
	emission of SyscallAdded as well.
	(CompactLog.full_log_syscall_added_cb): New callback from the
	child log; process the new syscall here instead of doing it in
	Update().
	(CompactLog.Update): Removed.
	(CompactLog.add_syscall): Emit SyscallAdded.

	* main-window.cs (MainWindow.update_timeout_cb): Don't explicitly
	Update() the compact log; it updates itself now.

2007-06-21  Federico Mena Quintero  <federico@novell.com>

	* filter.cs (SyscallVisibleField): Moved from syscall.cs to here,
	as this is a GUI issue, not a core syscall issue.
	(SyscallVisibleField): Don't have separate "Pid" and "Tid" fields;
	have a single "Process" instead which combines the
	execname:pid:tid.

	* regex-filter.cs: Based on substring-filter.cs - go all the way
	and allow for filters based on regular expressions.  Make the
	tests work.

	* substring-filter.cs: Removed.

	* Makefile (shared_sources): Added regex-filter.cs; removed
	substring-filter.cs.

2007-06-20  Federico Mena Quintero  <federico@novell.com>

	* syscall.cs (SyscallVisibleField): Enum to refer to fields of a
	syscall from other places.

	* filter.cs: Simple interface for syscall filters.  Filters can
	return which field of a syscall matches the search criteria.

	* substring-filter.cs: Simple filter for substrings of the string
	representation of various fields of a syscall.

	* util.cs: Utilities for formatting syscall fields into strings.

	* syscall-tree-view.cs (SyscallTreeView.data_func): Use Util
	instead of formatting things directly.

	* Makefile (shared_sources): Added filter.cs, substring-filter.cs, util.cs.

2007-06-18  Federico Mena Quintero  <federico@novell.com>

	Thanks to Miguel de Icaza for the stylistic fixes:

	* systemtap-parser.cs: Removed the "private" things; let the
	compiler do this automatically.

	* spawn.cs (GSpawnFlags): Make this an enum.

	* main.cs: 
	* runner.cs: 
	* spawn.cs: "using unix = Mono.Unix.Native.Syscall" instead of
	being verbose.

	* log.cs (Log.uniquify_string): Use String.Intern() instead of our
	own string pool.

	* string-pool.cs: Removed.

	* Makefile (shared_sources): Removed string-pool.cs.

2007-06-14  Federico Mena Quintero  <federico@novell.com>

	* syscall-tree-view.cs (SyscallTreeView.setup_colums): Move the
	Result column to the right of the Syscall one, so that the
	Arguments don't push Result too far to the right.

	* main.cs: Check that the user is root.

	* compact-log.cs (CompactLogTest.make_expected_syscalls): Change
	the tests to ensure that we don't change the number of the
	(CompactLog.MappedSyscall): Removed this struct.  We no longer
	modify the original syscall.index, so there's no need to store the
	"original" index value in a separate struct.
	(CompactLog.add_syscall): Don't modify the index of the original
	syscall, so that we can maintain it across filtering.
	(CompactLog.add_end_syscall): Use a plain Syscall rather than a
	MappedSyscall.

	* main-window.cs (MainWindow.build_action_group): Oops, we start
	in Compact view mode by default.
	(MainWindow.update_statusbar_with_syscall_count): Display the
	counts for the full log and the filtered log.

2007-06-14  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.compact_log): New field for the
	CompactLog in case we are in that view mode.
	(MainWindow.set_derived_model): Creates a SyscallListModel
	suitable for the current view mode and sets in on the tree view.
	(MainWindow.do_open): Use set_derived_model() instead of
	directly creating/setting the model here.
	(MainWindow.clear_cb): Likewise.
	(MainWindow.start_recording): Likewise.
	(MainWindow.set_view_mode): Implement.
	(MainWindow.update_timeout_cb): Update the compact log if appropriate.
	(MainWindow.update_statusbar_with_syscall_count): Use the
	appropriate log.

	* syscall-list-model.cs (SyscallListModel): Use an ILogProvider
	rather than a Log.

	* syscall-tree-view.cs (SyscallTreeView): Likewise.

	* compact-log.cs (CompactLog.CompactLog): Update ourselves as at
	creation time, so that we start up already populated.

2007-06-13  Federico Mena Quintero  <federico@novell.com>

	* compact-log.cs: Takes a full Log with start/end syscalls and
	compacts it into one with combined start+end syscalls.

	* Makefile (shared_sources): Added compact-log.cs.

2007-06-13  Federico Mena Quintero  <federico@novell.com>

	* log-provider.cs: New interface for a log
	provider.  We'll use this to refactor Log and provide a new
	CompactLog, for the compact view mode, and filtered logs.

	* log-modification-accumulator.cs: Stores the modifications
	emitted by a log provider; code moved over from log.cs.

	* Makefile (shared_sources): Added the new files.

	* log.cs (Log): Don't maintain the modification list here.

	* aggregator.cs (AggregatorTest): Use a LogModificationAccumulator
	instead of fetching the modification list directly from the Log.

	* syscall-list-model.cs (SyscallListModel): Likewise.

2007-06-13  Federico Mena Quintero  <federico@novell.com>

	* runner.cs (AggregatorRunner.Run): Use a pipe in the
	child_setup_func to feed the result from setsid() to the parent
	process.  Now we can Stop() the child processes and all their mess
	properly.

	* main-window.cs (MainWindow.do_quit): Stop recording before exiting.

2007-06-11  Federico Mena Quintero  <federico@novell.com>

	* systemtap-runner.cs (SystemtapRunner.SystemtapRunner): Add a
	handler to the underlying AggregatorRunner.ChildExited event.
	(ChildExited): Provide our own event.  This is lame - should we be
	a derived class?

	* spawn.cs (Spawn.ChildWatchAdd): Oops, really use the proxy so
	that the GC doesn't collect our trampoline.
	(Spawn.SpawnAsyncWithPipes): Add support for child_setup_func.

	* runner.cs (AggregatorRunner.Stop): Implement.
	(AggregatorRunner.child_watch_cb): Clear the fields that don't
	make sense when the child no longer exists.
	(AggregatorRunner.Run): Use a child_setup_fn in the call to
	SpawnAsyncWithPipes to do setsid() --- this way we can kill the
	entire process group of the child later.

	* log-io.cs (LogIO): Don't take in an ISyscallParser in the
	constructor; instead, have it passed to LogIO.Load().

	* main.cs: File for the Main function.

	* syscall-tree-view.cs (SyscallTreeView.SetModelAndLog): Oops, make this public.

	* main-window.cs (MainWindow.build_normal_action_entries): Include
	the accelerator keys explicitly, since the UI manager doesn't
	seem to pick them up automatically from the stock item.
	(MainWindow.start_recording): New function to start a recording run.
	(MainWindow.build_action_group): Start the record-mode widgets in Recording state.
	(MainWindow.build_tree_view): Make the shadow EtchedIn for the scrolled window.
	(MainWindow.save_as_cb): Implement.
	(MainWindow.do_save_as): Implement.
	(MainWindow.do_open): Implement.
	(MainWindow.clear_cb): Implement.
	(MainWindow.set_record_mode): Implement.
	(MainWindow.stop_recording): Implement.

2007-06-11  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs: Skeleton for the program's main window.

	* Makefile (mortadelo_sources): Added main-window.cs.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* log.cs: Use a string pool to reduce memory consuption; programs
	frequently make exactly the same syscalls in timers and their
	names / arguments / etc. can be thus shared.

	* memory-profile.cs: Simple program to analyze memory usage and
	loading speed.

	* string-pool.cs: Allow null strings.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* string-pool.cs: Trivial class for a string pool, to share
	strings across the program.

	* Makefile (sources): Added string-pool.cs.

	* Makefile (mortadelo-memory-profile.exe): Added a target for this.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* serializer.cs: Interface to serialize syscalls.

	* systemtap-serializer.cs: Simple serializer so we can write
	syscalls in the same format as we read them from the Systemtap script.

	* log-io.cs: Simple class to load/save logs from/to a stream.

	* Makefile (sources): Added the new source files.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* syscall-tree-view.cs: TreeView derivative for a syscall log.  It
	lives!

	* syscall-list-model.cs: ListStore derivative for syscalls; can
	update itself from a Log.

	* Makefile (sources): Added syscall-list-model.cs.
	(sources): Added syscall-tree-view.cs.
	(upload): Added an "upload" target to do "git push".

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* *.cs: Fix the order of arguments to Assert.AreEqual() so that
	they are (expected, actual).

	* log.cs (Log.ModifySyscall): Keep a set of the indices of
	syscalls which have been modified.
	(Log.GetModifiedIndexes): Public method to extract the set of
	modified indices.

	* aggregator.cs (AggregatorTest.OpenTest): Test the set of
	modified syscalls.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* runner.cs (AggregatorRunner.Run): Make the child stdout non-blocking.

	* unix-reader.cs: If we get EWOULDBLOCK from a read(), don't emit
	the DataAvailable event.

2007-06-06  Federico Mena Quintero  <federico@novell.com>

	* runner.cs: Generic engine to run an Aggregator plugged to the
	output of a subprocess.

	* unix-reader.cs (UnixReader.Dispose): Add a Dispose() method;
	remove the watch source if we get disposed prematurely.

	* spawn.cs (Spawn): Make this an instantiable class, so that we
	can hold on to the ChildWatchFunc --- the GC would otherwise
	collect the trampoline for the callback.
	(SpawnTest): Added a test fixture; tests the Spawn class in
	conjunction with UnixReader.

	* syscall.cs (Syscall.==): Added an == operator.

	* systemtap-runner.cs: Plug everything together:  Spawn the child
	process, create a UnixReader for it, feed incoming data to an
	Aggregator.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* Makefile (mortadelo.exe): Use -r:Mono.Posix to get Mono.Unix.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* line-reader.cs: Simple reader of lines from a stream.

	* unix-reader.cs: Buffered reader for Unix file descriptors that
	plugs into the Glib main loop.

	* spawn.cs: Wrapper for g_spawn_async_with_pipes() and g_child_watch_add().

	* GLib.IO.cs: Stolen from dbus-sharp-glib; this is a binding for
	GIOChannel.

	* Makefile (sources): Added the new files.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* log.cs: (Log.GetNumSyscalls): New method.

	* aggregator.cs (AggregatorTest.OpenTest): Test the number of
	syscalls parsed.  Add more interleaved syscalls to test.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* aggregator.cs: Fix the code and tests to pass.

	* systemtap-parser.cs (SystemtapParser.SystemtapParser): Also read
	the execname for open.return.
	(SystemtapParser.try_parse_open_return): Likewise.
	(SystemtapParserTest.OpenReturn): Add the execname to the passed/expected data.

	* syscall.cs (Syscall.ToString): New method.

	* Makefile (check): Added a "make check" target.

2007-06-04  Federico Mena Quintero  <federico@novell.com>

	* aggregator.cs: Aggregator of parsed syscalls into a log;
	maintains the state of pending syscalls.

	* log.cs: Simple log of syscalls.

	* Makefile: Use gmcs instead of plain mcs.

2007-06-04  Federico Mena Quintero  <federico@novell.com>

	* systemtap-parser.cs: Parser for data generated by Systemtap,
	with a little unit test.

	* parser.cs: Simple interface for a syscall parser.

	* Makefile (sources): Added parser.cs, systemtap-parser.cs.

	* errno.cs: Don't accept negative values.

2007-06-04  Federico Mena Quintero  <federico@novell.com>

	* errno.cs: List of errno codes.

	* syscall.cs: Basic struct to hold a syscall.

	* Makefile: Basic Makefile.

	* ChangeLog: Start the ChangeLog.
