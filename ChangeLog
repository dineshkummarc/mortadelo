2007-06-14  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs (MainWindow.compact_log): New field for the
	CompactLog in case we are in that view mode.
	(MainWindow.set_derived_model): Creates a SyscallListModel
	suitable for the current view mode and sets in on the tree view.
	(MainWindow.do_open): Use set_derived_model() instead of
	directly creating/setting the model here.
	(MainWindow.clear_cb): Likewise.
	(MainWindow.start_recording): Likewise.
	(MainWindow.set_view_mode): Implement.
	(MainWindow.update_timeout_cb): Update the compact log if appropriate.
	(MainWindow.update_statusbar_with_syscall_count): Use the
	appropriate log.

	* syscall-list-model.cs (SyscallListModel): Use an ILogProvider
	rather than a Log.

	* syscall-tree-view.cs (SyscallTreeView): Likewise.

	* compact-log.cs (CompactLog.CompactLog): Update ourselves as at
	creation time, so that we start up already populated.

2007-06-13  Federico Mena Quintero  <federico@novell.com>

	* compact-log.cs: Takes a full Log with start/end syscalls and
	compacts it into one with combined start+end syscalls.

	* Makefile (shared_sources): Added compact-log.cs.

2007-06-13  Federico Mena Quintero  <federico@novell.com>

	* log-provider.cs: New interface for a log
	provider.  We'll use this to refactor Log and provide a new
	CompactLog, for the compact view mode, and filtered logs.

	* log-modification-accumulator.cs: Stores the modifications
	emitted by a log provider; code moved over from log.cs.

	* Makefile (shared_sources): Added the new files.

	* log.cs (Log): Don't maintain the modification list here.

	* aggregator.cs (AggregatorTest): Use a LogModificationAccumulator
	instead of fetching the modification list directly from the Log.

	* syscall-list-model.cs (SyscallListModel): Likewise.

2007-06-13  Federico Mena Quintero  <federico@novell.com>

	* runner.cs (AggregatorRunner.Run): Use a pipe in the
	child_setup_func to feed the result from setsid() to the parent
	process.  Now we can Stop() the child processes and all their mess
	properly.

	* main-window.cs (MainWindow.do_quit): Stop recording before exiting.

2007-06-11  Federico Mena Quintero  <federico@novell.com>

	* systemtap-runner.cs (SystemtapRunner.SystemtapRunner): Add a
	handler to the underlying AggregatorRunner.ChildExited event.
	(ChildExited): Provide our own event.  This is lame - should we be
	a derived class?

	* spawn.cs (Spawn.ChildWatchAdd): Oops, really use the proxy so
	that the GC doesn't collect our trampoline.
	(Spawn.SpawnAsyncWithPipes): Add support for child_setup_func.

	* runner.cs (AggregatorRunner.Stop): Implement.
	(AggregatorRunner.child_watch_cb): Clear the fields that don't
	make sense when the child no longer exists.
	(AggregatorRunner.Run): Use a child_setup_fn in the call to
	SpawnAsyncWithPipes to do setsid() --- this way we can kill the
	entire process group of the child later.

	* log-io.cs (LogIO): Don't take in an ISyscallParser in the
	constructor; instead, have it passed to LogIO.Load().

	* main.cs: File for the Main function.

	* syscall-tree-view.cs (SyscallTreeView.SetModelAndLog): Oops, make this public.

	* main-window.cs (MainWindow.build_normal_action_entries): Include
	the accelerator keys explicitly, since the UI manager doesn't
	seem to pick them up automatically from the stock item.
	(MainWindow.start_recording): New function to start a recording run.
	(MainWindow.build_action_group): Start the record-mode widgets in Recording state.
	(MainWindow.build_tree_view): Make the shadow EtchedIn for the scrolled window.
	(MainWindow.save_as_cb): Implement.
	(MainWindow.do_save_as): Implement.
	(MainWindow.do_open): Implement.
	(MainWindow.clear_cb): Implement.
	(MainWindow.set_record_mode): Implement.
	(MainWindow.stop_recording): Implement.

2007-06-11  Federico Mena Quintero  <federico@novell.com>

	* main-window.cs: Skeleton for the program's main window.

	* Makefile (mortadelo_sources): Added main-window.cs.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* log.cs: Use a string pool to reduce memory consuption; programs
	frequently make exactly the same syscalls in timers and their
	names / arguments / etc. can be thus shared.

	* memory-profile.cs: Simple program to analyze memory usage and
	loading speed.

	* string-pool.cs: Allow null strings.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* string-pool.cs: Trivial class for a string pool, to share
	strings across the program.

	* Makefile (sources): Added string-pool.cs.

	* Makefile (mortadelo-memory-profile.exe): Added a target for this.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* serializer.cs: Interface to serialize syscalls.

	* systemtap-serializer.cs: Simple serializer so we can write
	syscalls in the same format as we read them from the Systemtap script.

	* log-io.cs: Simple class to load/save logs from/to a stream.

	* Makefile (sources): Added the new source files.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* syscall-tree-view.cs: TreeView derivative for a syscall log.  It
	lives!

	* syscall-list-model.cs: ListStore derivative for syscalls; can
	update itself from a Log.

	* Makefile (sources): Added syscall-list-model.cs.
	(sources): Added syscall-tree-view.cs.
	(upload): Added an "upload" target to do "git push".

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* *.cs: Fix the order of arguments to Assert.AreEqual() so that
	they are (expected, actual).

	* log.cs (Log.ModifySyscall): Keep a set of the indices of
	syscalls which have been modified.
	(Log.GetModifiedIndexes): Public method to extract the set of
	modified indices.

	* aggregator.cs (AggregatorTest.OpenTest): Test the set of
	modified syscalls.

2007-06-08  Federico Mena Quintero  <federico@novell.com>

	* runner.cs (AggregatorRunner.Run): Make the child stdout non-blocking.

	* unix-reader.cs: If we get EWOULDBLOCK from a read(), don't emit
	the DataAvailable event.

2007-06-06  Federico Mena Quintero  <federico@novell.com>

	* runner.cs: Generic engine to run an Aggregator plugged to the
	output of a subprocess.

	* unix-reader.cs (UnixReader.Dispose): Add a Dispose() method;
	remove the watch source if we get disposed prematurely.

	* spawn.cs (Spawn): Make this an instantiable class, so that we
	can hold on to the ChildWatchFunc --- the GC would otherwise
	collect the trampoline for the callback.
	(SpawnTest): Added a test fixture; tests the Spawn class in
	conjunction with UnixReader.

	* syscall.cs (Syscall.==): Added an == operator.

	* systemtap-runner.cs: Plug everything together:  Spawn the child
	process, create a UnixReader for it, feed incoming data to an
	Aggregator.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* Makefile (mortadelo.exe): Use -r:Mono.Posix to get Mono.Unix.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* line-reader.cs: Simple reader of lines from a stream.

	* unix-reader.cs: Buffered reader for Unix file descriptors that
	plugs into the Glib main loop.

	* spawn.cs: Wrapper for g_spawn_async_with_pipes() and g_child_watch_add().

	* GLib.IO.cs: Stolen from dbus-sharp-glib; this is a binding for
	GIOChannel.

	* Makefile (sources): Added the new files.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* log.cs: (Log.GetNumSyscalls): New method.

	* aggregator.cs (AggregatorTest.OpenTest): Test the number of
	syscalls parsed.  Add more interleaved syscalls to test.

2007-06-05  Federico Mena Quintero  <federico@novell.com>

	* aggregator.cs: Fix the code and tests to pass.

	* systemtap-parser.cs (SystemtapParser.SystemtapParser): Also read
	the execname for open.return.
	(SystemtapParser.try_parse_open_return): Likewise.
	(SystemtapParserTest.OpenReturn): Add the execname to the passed/expected data.

	* syscall.cs (Syscall.ToString): New method.

	* Makefile (check): Added a "make check" target.

2007-06-04  Federico Mena Quintero  <federico@novell.com>

	* aggregator.cs: Aggregator of parsed syscalls into a log;
	maintains the state of pending syscalls.

	* log.cs: Simple log of syscalls.

	* Makefile: Use gmcs instead of plain mcs.

2007-06-04  Federico Mena Quintero  <federico@novell.com>

	* systemtap-parser.cs: Parser for data generated by Systemtap,
	with a little unit test.

	* parser.cs: Simple interface for a syscall parser.

	* Makefile (sources): Added parser.cs, systemtap-parser.cs.

	* errno.cs: Don't accept negative values.

2007-06-04  Federico Mena Quintero  <federico@novell.com>

	* errno.cs: List of errno codes.

	* syscall.cs: Basic struct to hold a syscall.

	* Makefile: Basic Makefile.

	* ChangeLog: Start the ChangeLog.
